[Default]

Version = 1
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out
Strip Chars Mode = 0
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.


; --------------------------------------------------------------------------------
; SQL Statements https://bitbucket.org/torndeco/extdb3/wiki/extDB3%20-%20sql_custom.ini
; --------------------------------------------------------------------------------

[existPlayerInfo]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[insertPlayerInfo]
SQL1_1 = INSERT INTO users (uid, name, items, clothes, weapons, cash, bank, position, bankaccount) VALUES (?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[updatePlayerInfo]
SQL1_1 = UPDATE users SET items=?, clothes=?, weapons=?, cash=?, bank=?, position=?, hunger=?, thirst=? WHERE uid=?;
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[playerInfo]
SQL1_1 = SELECT items, clothes, weapons, cash, bank, bankaccount, hunger, thirst, respawn, subscriber FROM users WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1,2,3,4,5,6-string,7,8,9,10

[updateInventory]
SQL1_1 = UPDATE users SET items=?, clothes=?, weapons=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4

; --------------------------------------------------------------------------------
; ATM
; --------------------------------------------------------------------------------

[atm_existBankAccount]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE bankaccount = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[atm_playerBankBalance]
SQL1_1 = SELECT bank FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1
OUTPUT = 1

[atm_playerCashBalance]
SQL1_1 = SELECT cash FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1
OUTPUT = 1

[atm_playerBankAccount]
SQL1_1 = SELECT bankaccount FROM users WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1-String

[atm_playerMoney]
SQL1_1 = SELECT cash, bank FROM users WHERE bankaccount=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2

[atm_updatePlayerBalance]
SQL1_1 = UPDATE users SET bank=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2

[atm_updatePlayerCash]
SQL1_1 = UPDATE users SET cash=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2


[atm_updatePlayerMoney]
SQL1_1 = UPDATE users SET cash=?, bank=? WHERE bankaccount=?;
SQL1_INPUTS = 1,2,3

; --------------------------------------------------------------------------------
; Phone
; --------------------------------------------------------------------------------
[phone_exist_phone]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM phone_data WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[phone_exist_number]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM phone_numbers WHERE number = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[phone_get_data_uid]
SQL1_1 = SELECT ID, ring, skin, background, darknet FROM phone_data WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5

[phone_update_data]
SQL1_1 = UPDATE phone_data SET ring=?, skin=?, background=? WHERE ID=?;
SQL1_INPUTS = 1, 2, 3, 4

[phone_get_numbers_uid]
SQL1_1 = SELECT n.id, n.owner_uid, n.number, n.balance, n.offer_id, c.company_id, o.sms_price, o.minute_price FROM phone_numbers n INNER JOIN phone_offers o ON n.offer_id=o.offer_id INNER JOIN phone_companies c ON o.company_id=c.id WHERE n.owner_uid=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-string, 3-string, 4, 5, 6, 7, 8

[phone_insert_data]
SQL1_1 = INSERT INTO phone_data (uid) VALUES (?);
SQL1_INPUTS = 1

[phone_insert_number]
SQL1_1 = INSERT INTO phone_numbers (owner_uid, number, balance, offer_id) VALUES (?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4

[phone_get_contacts]
SQL1_1 = SELECT id, name, number, player FROM phone_contacts WHERE player=? || player='' ORDER BY player ASC, name ASC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-string, 3-string, 4-String

[phone_insert_contact]
SQL1_1 = INSERT INTO phone_contacts (player, number, name) VALUES (?,?,?);
SQL1_INPUTS = 1, 2-add_escape_quotes, 3-add_escape_quotes

[phone_update_contact]
SQL1_1 = UPDATE phone_contacts SET name=?, number=? WHERE id=? AND player !='';
SQL1_INPUTS = 1-add_escape_quotes,2-add_escape_quotes,3

[phone_update_balance]
SQL1_1 = UPDATE phone_numbers SET balance=? WHERE id=?;
SQL1_INPUTS = 1, 2

[phone_delete_contact]
SQL1_1 = DELETE FROM phone_contacts WHERE id=? AND player !='';
SQL1_INPUTS = 1

[phone_delete_number]
SQL1_1 = DELETE FROM phone_numbers WHERE id=?;
SQL1_INPUTS = 1

[phone_get_messages_number]
SQL1_1 = SELECT message, sender_number, receiver_number FROM phone_messages WHERE sender_number=? || receiver_number=?  ORDER BY id DESC
SQL1_INPUTS = 1, 1
OUTPUT = 1-String, 2-String, 3-String

[phone_insert_message]
SQL1_1 = INSERT INTO phone_messages (message, sender_number, receiver_number) VALUES (?,?,?)
SQL1_INPUTS = 1-add_escape_quotes, 2, 3

[phone_get_offers]
SQL1_1 = SELECT o.`offer_id`, c.`company_id`, o.`sms_price`, o.`minute_price`, l.shortcut, l.fullname FROM `phone_offers` o INNER JOIN phone_companies c ON o.company_id=c.id INNER JOIN company_list l ON c.company_id=l.company_id;
OUTPUT = 1, 2, 3, 4, 5-String, 6-String

[phone_get_companies]
SQL1_1 = SELECT c.`id`, c.`company_id`, c.`number_prefix`, l.shortcut, l.fullname FROM `phone_companies` c INNER JOIN company_list l ON c.company_id=l.company_id;
OUTPUT = 1, 2, 3-String, 4-String, 5-String

[phone_get_ringtones]
SQL1_1 = SELECT ringtone_id, path, subscriber, private, name FROM phone_ringtones;
OUTPUT = 1, 2-String, 3, 4, 5-String

[phone_get_backgrounds]
SQL1_1 = SELECT background_id, path, subscriber, private, name FROM phone_backgrounds;
OUTPUT = 1, 2-String, 3, 4, 5-String

[phone_get_frames]
SQL1_1 = SELECT frame_id, path, subscriber, private, name FROM phone_frames;
OUTPUT = 1, 2-String, 3, 4, 5-String
; --------------------------------------------------------------------------------
; Garage
; --------------------------------------------------------------------------------
[garage_getVehicles]
SQL1_1 = SELECT * FROM garage WHERE owner=? AND status=? AND type=?
SQL1_INPUTS = 1, 2, 3
OUTPUT = 1, 2-string, 3-String, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String, 14

[garage_getVehicles_uid]
SQL1_1 = SELECT * FROM garage WHERE owner=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-string, 3-String, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String, 14


[garage_deleteVehicle]
SQL1_1 = DELETE FROM garage WHERE id=?;
SQL1_INPUTS = 1

[garage_existLicense]
SQL1_1 = SELECT CASE WHEN EXISTS((SELECT license FROM garage WHERE license = ?) UNION (SELECT license FROM company_garage WHERE license = ?)) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1, 1

[garage_updateStatus]
SQL1_1 = UPDATE garage SET status=? WHERE id=?
SQL1_INPUTS = 1, 2

[garage_updateStatusStore]
SQL1_1 = UPDATE garage SET status=?, hit=?, fuel=?, damage=? WHERE id=?
SQL1_INPUTS = 1, 2, 3, 5, 4

[garage_updateStatusReset]
SQL1_1 = UPDATE garage SET status=? WHERE status=?
SQL1_INPUTS = 1, 2

[garage_change_owner]
SQL1_1 = UPDATE garage SET owner=?, status=0 WHERE id=?
SQL1_INPUTS = 1, 2

[garage_repair_id]
SQL1_1 = UPDATE garage SET damage=?, hit=?, fuel=1 WHERE id=?
SQL1_INPUTS = 1, 2, 3

[garage_update_color]
SQL1_1 = UPDATE garage SET color=?, material=? WHERE id=?
SQL1_INPUTS = 1, 2, 3

; --------------------------------------------------------------------------------
; SLPD
; --------------------------------------------------------------------------------

[insertSLPDWanted]
SQL1_1 = INSERT INTO slpd_wanted (uid_suspect, uid_officer, charges, wanted_level, active) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[insertSLPDWantedVehicle]
SQL1_1 = INSERT INTO slpd_wanted_vehicle (plate, description, uid_officer, reason, wanted_level, active) VALUES (?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6

[insertSLPDTicket]
SQL1_1 = INSERT INTO slpd_tickets (uid_player, uid_officer, amount, reason, points) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[insertSLPDPrison]
SQL1_1 = INSERT INTO slpd_prison (uid_player, uid_officer, time_prison, time_left, reason) VALUES (?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5

[updateSLPDWanted_wanted]
SQL1_1 = UPDATE slpd_wanted SET wanted_level=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWanted_close]
SQL1_1 = UPDATE slpd_wanted SET wanted_level=0, active=0, uid_closed=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_wanted]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_close]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=0, active=0, uid_closed=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDWantedVehicle_close_all]
SQL1_1 = UPDATE slpd_wanted_vehicle SET wanted_level=0, active=0, uid_closed=? WHERE plate=?
SQL1_INPUTS = 1, 2

[updateSLPDPrison_deactive]
SQL1_1 = UPDATE slpd_prison SET active=0 WHERE id=?
SQL1_INPUTS = 1

[updateSLPDPrison_escape]
SQL1_1 = UPDATE slpd_prison SET active=0 WHERE uid_player=?
SQL1_INPUTS = 1

[updateSLPDPrison_time]
SQL1_1 = UPDATE slpd_prison SET time_left=? WHERE id=?
SQL1_INPUTS = 1, 2

[updateSLPDPrison_active]
SQL1_1 = UPDATE slpd_prison SET active=1 WHERE id=?
SQL1_INPUTS = 1

[updateSLPDPrison_ended]
SQL1_1 = UPDATE slpd_prison SET active=0, time_left=0 WHERE uid_player=?
SQL1_INPUTS = 1

[updateSLPDPrison_finish]
SQL1_1 = UPDATE slpd_prison SET active=0, time_left=0 WHERE id=?
SQL1_INPUTS = 1

[getSLPDPrison_active]
SQL1_1 = SELECT id, uid_player, uid_officer, active, time_prison, time_left, reason FROM slpd_prison WHERE uid_player=? AND active=?
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3-String, 4, 5, 6, 7-String

[getSLPDWanted_case]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWanted_active]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.active=? AND s.connection=1 ORDER BY w.wanted_level DESC, w.id DESC LIMIT 30
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWanted_uid]
SQL1_1 = SELECT w.id, w.uid_suspect, s.name, w.uid_officer, o.name, w.charges, w.wanted_level, w.active FROM slpd_wanted w JOIN users s ON w.uid_suspect=s.uid JOIN users o ON w.uid_officer=o.uid WHERE w.uid_suspect=? AND w.active=? ORDER BY w.wanted_level DESC, w.id DESC LIMIT 30
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWantedVehicle_case]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDWantedVehicle_active]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.active=? AND v.date > timestampadd(day, -7, now()) ORDER BY v.wanted_level DESC, v.id DESC LIMIT 30
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDVehicle_plate]
SQL1_1 = SELECT g.license, g.classname, g.color, g.material, g.owner, u.name FROM garage g JOIN users u ON g.owner=u.uid WHERE g.license=?
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String, 3-String, 4-String, 5-String, 6-String

[getSLPDWantedVehicle_plate]
SQL1_1 = SELECT v.id, v.plate, v.description, v.uid_officer, u.name, v.reason, v.wanted_level, v.active FROM slpd_wanted_vehicle v JOIN users u ON v.uid_officer=u.uid WHERE v.plate=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDticket_uid]
SQL1_1 = SELECT t.id, t.uid_player, s.name, t.uid_officer, o.name, t.reason, t.amount, t.points FROM slpd_tickets t JOIN users s ON t.uid_player=s.uid JOIN users o ON t.uid_officer=o.uid WHERE t.uid_player=? AND t.date > timestampadd(day, -7, now()) ORDER BY t.id DESC
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7, 8

[getSLPDticket_points]
SQL1_1 = SELECT SUM(points) FROM slpd_tickets WHERE uid_player = ? AND date > timestampadd(day, -7, now())
SQL1_INPUTS = 1
OUTPUT = 1

[getSLPDplayerInfo_uid]
SQL1_1 = SELECT uid, name, bankaccount, cash, bank FROM users WHERE uid=?
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String, 3, 4, 5

[getSLPDplayerInfo_name]
SQL1_1 = SELECT uid FROM users WHERE name=?
SQL1_INPUTS = 1
OUTPUT = 1-String

[getSLPDPoliceStorage]
SQL1_1 = SELECT police FROM slpd_storage WHERE id=?
SQL1_INPUTS = 1
OUTPUT = 1

[updateSLPDPoliceStorage]
SQL1_1 = UPDATE slpd_storage SET police=? WHERE id=?
SQL1_INPUTS = 1, 2

; --------------------------------------------------------------------------------
; Log system
; --------------------------------------------------------------------------------

[log_actionLog]
SQL1_1 = INSERT INTO log_action (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_vehicleLog]
SQL1_1 = INSERT INTO log_vehicle (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, vehicleClassname, vehicleName) VALUES (?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

[log_moneyLog]
SQL1_1 = INSERT INTO log_money (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons, amount) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

[log_copLog]
SQL1_1 = INSERT INTO log_cop (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_deathLog]
SQL1_1 = INSERT INTO log_death (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons, weapon) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

[log_economyLog]
SQL1_1 = INSERT INTO log_economy (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_adminLog]
SQL1_1 = INSERT INTO log_admin (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, unitUID, unitName, unitCash, unitBank, unitItems, unitClothes, unitWeapons,) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[log_craftLog]
SQL1_1 = INSERT INTO log_craft (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text, classname, name) VALUES (?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

[log_jobLog]
SQL1_1 = INSERT INTO log_job (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text) VALUES (?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9

[log_connectionLog]
SQL1_1 = INSERT INTO log_connection (playerUID, playerName, playerCash, playerBank, playerItems, playerClothes, playerWeapons, type, text) VALUES (?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9

; --------------------------------------------------------------------------------
; updateConnection & resetConnection
; --------------------------------------------------------------------------------

[updateConnection_connected]
SQL1_1 = UPDATE users SET connection=1, name=? WHERE uid=?
SQL1_INPUTS = 1, 2

[updateConnection_disconnected]
SQL1_1 = UPDATE users SET connection=0 WHERE uid=?
SQL1_INPUTS = 1

[updateConnection_reset]
SQL1_1 = UPDATE users SET connection=?
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Housing
; --------------------------------------------------------------------------------
[housing_get_furniture_house_id]
SQL1_1 = SELECT furniture_id, house_id, class_name, position, rotation, is_cargo, cargo FROM housing_furniture WHERE house_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5-String, 6, 7

[housing_get_furniture_id]
SQL1_1 = SELECT furniture_id, house_id, class_name, position, rotation, is_cargo, cargo FROM housing_furniture WHERE furniture_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5-String, 6, 7

[housing_get_houses_owner_uid]
SQL1_1 = SELECT house_id, house_type_id, selling, price, house_variable, garage, furniture, respawn, uid, company_id, position, description FROM housing_list WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5-String, 6, 7, 8, 9-String, 10, 11-String, 12-String

[housing_get_house_uid_pos]
SQL1_1 = SELECT house_id FROM housing_list WHERE uid=? AND position=?;
SQL1_INPUTS = 1, 2
OUTPUT = 1

[housing_get_furniture_id_pos]
SQL1_1 = SELECT furniture_id FROM housing_furniture WHERE house_id=? AND position=?;
SQL1_INPUTS = 1, 2
OUTPUT = 1

[housing_get_houses]
SQL1_1 = SELECT house_id, house_type_id, selling, price, house_variable, garage, furniture, respawn, uid, company_id, position, description FROM housing_list;
OUTPUT = 1, 2, 3, 4, 5-String, 6, 7, 8, 9-String, 10, 11-String, 12-String

[housing_get_house_id]
SQL1_1 = SELECT house_id, house_type_id, selling, price, house_variable, garage, furniture, respawn, uid, company_id, position, description FROM housing_list WHERE house_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5-String, 6, 7, 8, 9-String, 10, 11-String, 12-String

[housing_get_houses_company_id]
SQL1_1 = SELECT house_id, house_type_id, selling, price, house_variable, garage, furniture, respawn, uid, company_id, position, description FROM housing_list WHERE company_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5-String, 6, 7, 8, 9-String, 10, 11-String, 12-String

[housing_get_types]
SQL1_1 = SELECT house_type_id, class_name, house_variable, price, garage, furniture, respawn FROM housing_type;
OUTPUT = 1, 2-String, 3-String, 4, 5, 6, 7

[housing_update_furniture_id_cargo]
SQL1_1 = UPDATE housing_furniture SET cargo=? WHERE furniture_id=?;
SQL1_INPUTS = 1, 2

[housing_update_house_sell]
SQL1_1 = UPDATE housing_list SET selling=1, price=?, description=? WHERE house_id=?;
SQL1_INPUTS = 1, 2, 3

[housing_update_house_unsell]
SQL1_1 = UPDATE housing_list SET selling=0 WHERE house_id=?;
SQL1_INPUTS = 1

[housing_update_owner]
SQL1_1 = UPDATE housing_list SET uid=? WHERE house_id=?;
SQL1_INPUTS = 1, 2

[housing_update_upgrades]
SQL1_1 = UPDATE housing_list SET garage=?, furniture=?, respawn=? WHERE house_id=?;
SQL1_INPUTS = 1, 2, 3, 4

[housing_update_furniture]
SQL1_1 = UPDATE housing_furniture SET position=?, rotation=? WHERE furniture_id=?;
SQL1_INPUTS = 1, 2, 3

[housing_insert_house]
SQL1_1 = INSERT INTO housing_list (house_type_id, respawn, uid, position) VALUES (?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4

[housing_insert_furniture]
SQL1_1 = INSERT INTO housing_furniture (house_id, class_name, position, rotation, is_cargo) VALUES (?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5

[housing_delete_furniture]
SQL1_1 = DELETE FROM housing_furniture WHERE furniture_id=?;
SQL1_INPUTS = 1


; --------------------------------------------------------------------------------
; Medical
; --------------------------------------------------------------------------------
[medical_getStatuses_all]
SQL1_1 = SELECT damage, unconscious, pain, HitHead, HitBody, HitLeftArm, HitRightArm, HitLeftLeg, HitRightLeg FROM medical_statuses WHERE uid_player=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5, 6, 7, 8, 9

[medical_updateStatuses_dead]
SQL1_1 = UPDATE medical_statuses SET unconscious=? WHERE uid_player=?
SQL1_INPUTS = 1, 2

[medical_updateStatuses_all]
SQL1_1 = UPDATE medical_statuses SET damage=?, unconscious=?, pain=?, HitHead=?, HitBody=?, HitLeftArm=?, HitRightArm=?, HitLeftLeg=?, HitRightLeg=? WHERE uid_player=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

[medical_insertStatuses]
SQL1_1 = INSERT INTO medical_statuses (uid_player) VALUES (?);
SQL1_INPUTS = 1

[medical_checkIfExists]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM medical_statuses WHERE uid_player=?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Company
; --------------------------------------------------------------------------------
[company_getCompanyCurrent]
SQL1_1 = SELECT l.company_id, l.shortcut, l.fullname, l.owner_uid, e.access_level, e.salary FROM company_list l INNER JOIN company_employees e ON l.company_id = e.company_id WHERE e.employee_uid=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6

[company_getCompanyNOTCurrent]
SQL1_1 = SELECT company_id, shortcut, fullname FROM company_list WHERE company_id NOT IN (SELECT l.company_id FROM company_list l INNER JOIN company_employees e ON l.company_id = e.company_id WHERE e.employee_uid=?);
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String

[company_getPrivligesCurrent]
SQL1_1 = SELECT company_id, variable_name, max_level, offset FROM company_privliges WHERE company_id IN (SELECT company_id FROM company_employees WHERE employee_uid=?);
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3, 4

[company_getCompanyNumbers]
SQL1_1 = SELECT company_id, number FROM company_list WHERE number!="";
OUTPUT = 1, 2-String

[company_getCompanyAll_id]
SQL1_1 = SELECT company_id, shortcut, fullname, owner_uid, vehicles_current, vehicles_max, employees_current, employees_max, company_level, bank FROM company_list WHERE company_id = ?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7, 8, 9, 10

[company_getEmployees_Company_ID]
SQL1_1 = SELECT e.employee_uid, u.name, u.bankaccount, e.employee_id FROM company_employees e INNER JOIN users u ON e.employee_uid=u.uid WHERE e.company_id=?;
SQL1_INPUTS = 1
OUTPUT = 1-String, 2-String, 3-String, 4

[company_getCompany_Short]
SQL1_1 = SELECT company_id, shortcut, fullname, owner_uid FROM company_list WHERE shortcut=? AND owner_uid=?;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3-String, 4-String

[company_employees_insert]
SQL1_1 = INSERT INTO company_employees (company_id, employee_uid, access_level) VALUES (?,?,?);
SQL1_INPUTS = 1, 2, 3

[company_employees_update]
SQL1_1 = UPDATE company_employees SET salary=?, access_level=?, description=? WHERE employee_id=? AND company_id=?
SQL1_INPUTS = 1, 2, 5, 3, 4

[company_employee_getID]
SQL1_1 = SELECT e.employee_id, e.employee_uid, u.name, e.access_level, e.salary, e.description FROM company_employees e INNER JOIN users u ON e.employee_uid=u.uid WHERE e.employee_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4, 5, 6-String

[company_employees_delete]
SQL1_1 = DELETE FROM company_employees WHERE company_id=? AND employee_id=?
SQL1_INPUTS = 1, 2

[company_getAllCompany]
SQL1_1 = SELECT company_id, shortcut, fullname FROM company_list;
OUTPUT = 1, 2-String, 3-String

[company_getBank_id]
SQL1_1 = SELECT company_id, bank FROM company_list WHERE company_id = ?
SQL1_INPUTS = 1
OUTPUT = 1, 2

[company_updateBankAdd_id]
SQL1_1 = UPDATE company_list SET bank = bank + ? WHERE company_id = ?;
SQL1_INPUTS = 1, 2

[company_updateBankRemove_id]
SQL1_1 = UPDATE company_list SET bank = bank - ? WHERE company_id = ?;
SQL1_INPUTS = 1, 2

[company_garage_insertVehicle]
SQL1_1 = INSERT INTO company_garage (classname, company_id, license, color, material, rims, windows, lights, type) VALUES (?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9

[company_garage_getVehicles]
SQL1_1 = SELECT vehicle_id, classname, company_id, license, hit, color, material, rims, windows, lights, fuel, status, type, damage, access_level, skin FROM company_garage WHERE company_id=? AND status=? AND type=? AND access_level <=?
SQL1_INPUTS = 1, 2, 3, 4
OUTPUT = 1, 2-string, 3, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String, 14, 15, 16-String

[company_garage_getVehicles_all]
SQL1_1 = SELECT vehicle_id, classname, company_id, license, hit, color, material, rims, windows, lights, fuel, status, type, damage, access_level, skin FROM company_garage WHERE company_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-string, 3, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String, 14, 15, 16-String

[company_garage_getVehicle]
SQL1_1 = SELECT vehicle_id, classname, company_id, license, hit, color, material, rims, windows, lights, fuel, status, type, damage, access_level, skin FROM company_garage WHERE vehicle_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2-string, 3, 4-String, 5, 6-String, 7-String, 8-String, 9, 10, 11, 12 ,13-String, 14, 15, 16-String

[company_garage_update_color]
SQL1_1 = UPDATE company_garage SET color=?, material=? WHERE vehicle_id=?
SQL1_INPUTS = 1, 2, 3


[company_garage_deleteVehicle]
SQL1_1 = DELETE FROM garage WHERE vehicle_id=?;
SQL1_INPUTS = 1

[company_garage_existLicense]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT license FROM company_garage WHERE license=? UNION SELECT license FROM garage WHERE license=?) THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1, 1

[company_garage_updateStatus]
SQL1_1 = UPDATE company_garage SET status=? WHERE vehicle_id=?
SQL1_INPUTS = 1, 2

[company_garage_updateAccessLevel]
SQL1_1 = UPDATE company_garage SET access_level=? WHERE vehicle_id=?
SQL1_INPUTS = 1, 2

[company_garage_updateLicense]
SQL1_1 = UPDATE company_garage SET license=? WHERE license=?
SQL1_INPUTS = 1, 2

[company_garage_updateStatusStore]
SQL1_1 = UPDATE company_garage SET status=?, hit=?, fuel=?, damage=? WHERE vehicle_id=?
SQL1_INPUTS = 1, 2, 3, 5, 4

[company_garage_updateStatusReset]
SQL1_1 = UPDATE company_garage SET status=? WHERE status=?
SQL1_INPUTS = 1, 2

[company_garage_repair]
SQL1_1 = UPDATE company_garage SET damage=?, hit=?, fuel=1 WHERE vehicle_id=?
SQL1_INPUTS = 1, 2, 3


[company_exists]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM company_list WHERE shortcut=?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[company_list_insert]
SQL1_1 = INSERT INTO company_list (shortcut, fullname, owner_uid) VALUES (?,?,?);
SQL1_INPUTS = 1, 2, 3


[company_applicants_insert]
SQL1_1 = INSERT INTO company_applicants (company_id, description, player_uid) VALUES (?,?,?);
SQL1_INPUTS = 1, 2, 3

[company_applicants_get]
SQL1_1 = SELECT applicant_id, company_id, description, player_uid FROM company_applicants WHERE player_uid=? AND company_id=?
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3-String, 4-String, 5-String

[company_applicants_getALL]
SQL1_1 = SELECT a.applicant_id, a.company_id, a.description, a.player_uid, u.name FROM company_applicants a INNER JOIN users u ON a.player_uid=u.uid  WHERE a.company_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5-String

[company_applicants_delete]
SQL1_1 = DELETE FROM company_applicants WHERE applicant_id=?;
SQL1_INPUTS = 1


[company_tax_get]
SQL1_1 = SELECT tax_id, percentage, title, description, company_id FROM company_tax;
OUTPUT = 1, 2, 3-String, 4-String, 5

[company_invoice_definition_get]
SQL1_1 = SELECT definition_id, company_id, tax_id, description, title FROM company_invoice_definition;
OUTPUT = 1, 2, 3, 4-String, 5-String

[company_invoice_get_company_issued]
SQL1_1 = SELECT invoice_id, issuer_company_id, receiver_company_id, receiver_uid, tax_id, net_price, gross_price, description, payed FROM company_invoice WHERE issuer_company_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4-String, 5, 6, 7, 8-String, 9

[company_invoice_get_id]
SQL1_1 = SELECT invoice_id, issuer_company_id, receiver_company_id, receiver_uid, tax_id, net_price, gross_price, description, payed FROM company_invoice WHERE invoice_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-Null, 4-String-Null, 5, 6, 7, 8-String, 9

[company_invoice_get_latest]
SQL1_1 = SELECT invoice_id FROM company_invoice WHERE issuer_company_id=? AND net_price=? AND pay_time=? AND payed=0 ORDER BY create_date DESC LIMIT 1;
SQL1_INPUTS = 1, 2, 3
OUTPUT = 1

[company_invoice_get_company_due]
SQL1_1 = SELECT invoice_id, issuer_company_id, receiver_company_id, tax_id, net_price, gross_price, description, payed FROM company_invoice WHERE receiver_company_id=? AND payed=? ORDER BY due_date ASC;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3, 4, 5, 6, 7-String, 8

[company_invoice_get_player_due]
SQL1_1 = SELECT invoice_id, issuer_company_id, receiver_uid, tax_id, net_price, gross_price, description, payed FROM company_invoice WHERE receiver_uid=? AND payed=? ORDER BY due_date ASC;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3-String, 4, 5, 6, 7-String, 8

[company_invoice_insert_company]
SQL1_1 = INSERT INTO company_invoice (issuer_company_id, receiver_company_id, tax_id, net_price, gross_price, description, pay_time, due_date, payed) VALUES (?, ?, ?, ?, ROUND(((SELECT percentage FROM company_tax WHERE tax_id = ?)) * ABS(net_price) / 100 + net_price), ?, ?, DATE_ADD(NOW(), INTERVAL pay_time DAY), ?);
SQL1_INPUTS = 1, 2, 3, 4, 3, 5, 6, 7

[company_invoice_insert_player]
SQL1_1 = INSERT INTO company_invoice (issuer_company_id, receiver_uid, tax_id, net_price, gross_price, description, pay_time, due_date, payed) VALUES (?, ?, ?, ?, ROUND(((SELECT percentage FROM company_tax WHERE tax_id = ?)) * ABS(net_price) / 100 + net_price), ?, ?, DATE_ADD(NOW(), INTERVAL pay_time DAY), ?);
SQL1_INPUTS = 1, 2, 3, 4, 3, 5, 6, 7

[company_invoice_update_pay]
SQL1_1 = UPDATE company_invoice SET payed=1 WHERE invoice_id=?
SQL1_INPUTS = 1

[company_permissions_update]
SQL1_1 = UPDATE company_permissions SET f_atm_withdraw=?, f_atm_pay=?, f_atm_transfer=?, f_invoice_create=?, f_invoice_pay=?, l_preview_vehicles=?, l_preview_finance=?, l_preview_invoice=?, m_change_access_level=?, m_kick_employee=?, m_set_paycheck=?, m_change_employee_description=?, v_change_access_level=?, v_vehicle_buy=?, v_vehicle_sell=?, v_vehicle_change_plate=? WHERE company_id=?
SQL1_INPUTS = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1

[company_permission_get]
SQL1_1 = SELECT f_atm_withdraw, f_atm_pay, f_atm_transfer, f_invoice_create, f_invoice_pay, l_preview_vehicles, l_preview_finance, l_preview_invoice, m_change_access_level, m_kick_employee, m_set_paycheck, m_change_employee_description, v_change_access_level, v_vehicle_buy, v_vehicle_sell, v_vehicle_change_plate FROM company_permissions WHERE company_id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16

[company_log_insert]
SQL1_1 = INSERT INTO company_logs (company_id, uid, log_type, description, bank_amount) VALUES (?, ?, ?, ?, (SELECT bank FROM company_list WHERE company_id=?));
SQL1_INPUTS = 1, 2, 3, 4, 1

[company_log_get_type]
SQL1_1 = SELECT l.c_log_id, l.log_type, l.uid, l.description, u.name FROM company_logs l INNER JOIN users u ON l.uid=u.uid WHERE l.company_id=? AND l.log_type=? ORDER BY l.date DESC;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3-String, 4-String, 5-String

[company_log_get_uid]
SQL1_1 = SELECT l.c_log_id, l.log_type, l.uid, l.description, u.name FROM company_logs l INNER JOIN company_employees e ON e.company_id=l.company_id INNER JOIN users u ON u.uid=e.employee_uid WHERE e.employee_id=? ORDER BY l.date DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5-String


; --------------------------------------------------------------------------------
; Showroom
; --------------------------------------------------------------------------------
[showroom_fetchPrices]
SQL1_1 = SELECT ID, classname, price, count, type, company_id, custom_skin FROM showroom_prices WHERE company_id=0;
OUTPUT = 1, 2-String, 3, 4, 5-string, 6, 7

[showroom_getVeh]
SQL1_1 = SELECT ID, classname, price, count, type, company_id, custom_skin FROM showroom_prices WHERE ID=?;
OUTPUT = 1, 2-String, 3, 4, 5-string, 6, 7
SQL1_INPUTS = 1

[showroom_getVeh_class]
SQL1_1 = SELECT ID, classname, price, count, type, company_id, custom_skin FROM showroom_prices WHERE classname=?;
OUTPUT = 1, 2-String, 3, 4, 5-string, 6, 7
SQL1_INPUTS = 1

[showroom_fetchPrices_company_id]
SQL1_1 = SELECT ID, classname, price, count, type, company_id, custom_skin FROM showroom_prices WHERE type=? AND company_id=?
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3, 4, 5-string, 6, 7

[showroom_insertVehicle]
SQL1_1 = INSERT INTO garage (classname, owner, license, hit, color, material, rims, windows, lights, fuel, status, type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12

[showroom_updateCount]
SQL1_1 = UPDATE showroom_prices SET count=count-1 WHERE ID=?
SQL1_INPUTS = 1


; --------------------------------------------------------------------------------
; Crafting
; --------------------------------------------------------------------------------
[crafting_getList_byPlace_default]
SQL1_1 = SELECT l.crafting_id, l.item_id, i.class_name, l.place, l.company_id, i.type, l.amount, l.time FROM crafting_list l JOIN crafting_items i ON l.item_id=i.item_id WHERE l.place=? AND l.company_id=0;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5, 6-String, 7, 8

[crafting_getList_byPlace_company]
SQL1_1 = SELECT l.crafting_id, l.item_id, i.class_name, l.place, l.company_id, i.type, l.amount, l.time FROM crafting_list l JOIN crafting_items i ON l.item_id=i.item_id WHERE l.place=? AND l.company_id=?;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3-String, 4-String, 5, 6-String, 7, 8

[crafting_getList_distinctPlace]
SQL1_1 = SELECT DISTINCT place FROM crafting_list;
OUTPUT = 1-String

[crafting_getNeededItems_byID]
SQL1_1 = SELECT n.crafting_id, n.item_id, i.class_name, n.amount, i.type FROM crafting_needed n JOIN crafting_items i ON n.item_id=i.item_id WHERE n.crafting_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4, 5-String

; --------------------------------------------------------------------------------
; License
; --------------------------------------------------------------------------------
[license_get_companies_give]
SQL1_1 = SELECT c.company_id, c.license_id, l.license_variable, l.license_name, c.min_level FROM license_company_give c INNER JOIN license_list l ON l.license_id=c.license_id WHERE c.company_id IN (SELECT company_id FROM company_employees WHERE employee_uid=?);
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5

[license_get_companies_revoke]
SQL1_1 = SELECT c.company_id, c.license_id, l.license_variable, l.license_name, c.min_level FROM license_company_revoke c INNER JOIN license_list l ON l.license_id=c.license_id WHERE c.company_id IN (SELECT company_id FROM company_employees WHERE employee_uid=?);
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5

[license_get_companies_preview]
SQL1_1 = SELECT c.company_id, c.license_id, l.license_variable, l.license_name, c.min_level FROM license_company_preview c INNER JOIN license_list l ON l.license_id=c.license_id WHERE c.company_id IN (SELECT company_id FROM company_employees WHERE employee_uid=?);
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4-String, 5

[license_get_list]
SQL1_1 = SELECT license_id, license_variable, license_name, max_period FROM license_list;
OUTPUT = 1, 2-String, 3-String, 4

[license_get_current_player]
SQL1_1 = SELECT u.license_id, l.license_variable, l.license_name, u.description, u.ID FROM license_users u INNER JOIN license_list l ON u.license_id=l.license_id WHERE NOW() > u.date_start AND NOW() < u.date_end AND u.player_uid=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5

[license_insert_period]
SQL1_1 = INSERT INTO license_users (license_id, player_uid, description, date_end) VALUES (?, ?, ?, DATE_ADD(NOW(), INTERVAL ? DAY));
SQL1_INPUTS = 1, 2, 3, 4

[license_delete_period]
SQL1_1 = DELETE FROM license_users WHERE date_end < NOW();

[license_delete_uid]
SQL1_1 = DELETE FROM license_users WHERE ID=?
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; Marketplace
; --------------------------------------------------------------------------------
[marketplace_get_cat_materials]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (9,10) ORDER BY l.id DESC;
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_food]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (8) ORDER BY l.id DESC;
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_uniforms]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (3,4,5,6,7) ORDER BY l.id DESC;
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_weapons]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (1,2) ORDER BY l.id DESC;
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_materials_uid]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (9,10) AND l.owner_uid=? ORDER BY l.id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_food_uid]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (8) AND l.owner_uid=? ORDER BY l.id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_uniforms_uid]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (3,4,5,6,7) AND l.owner_uid=? ORDER BY l.id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_get_cat_weapons_uid]
SQL1_1 = SELECT l.id, i.item_class, t.type_name, t.type_class, l.count, l.price, l.owner_uid, u.name, u.bankaccount FROM marketplace_list l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id JOIN users u ON l.owner_uid=u.uid WHERE i.type_id IN (1,2) AND l.owner_uid=? ORDER BY l.id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5, 6, 7-String, 8-String, 9-String

[marketplace_magazine_get_cat_materials_uid]
SQL1_1 = SELECT l.magazine_id, i.item_class, t.type_name, t.type_class, l.count FROM marketplace_magazine l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id WHERE i.type_id IN (9,10) AND l.owner_uid=? ORDER BY l.magazine_id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5

[marketplace_magazine_get_cat_food_uid]
SQL1_1 = SELECT l.magazine_id, i.item_class, t.type_name, t.type_class, l.count FROM marketplace_magazine l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id WHERE i.type_id IN (8) AND l.owner_uid=? ORDER BY l.magazine_id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5

[marketplace_magazine_get_cat_uniforms_uid]
SQL1_1 = SELECT l.magazine_id, i.item_class, t.type_name, t.type_class, l.count FROM marketplace_magazine l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id WHERE i.type_id IN (3,4,5,6,7) AND l.owner_uid=? ORDER BY l.magazine_id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5

[marketplace_magazine_get_cat_weapons_uid]
SQL1_1 =  SELECT l.magazine_id, i.item_class, t.type_name, t.type_class, l.count FROM marketplace_magazine l JOIN marketplace_items i ON i.item_id=l.item_id JOIN marketplace_types t ON t.type_id=i.type_id WHERE i.type_id IN (1,2) AND l.owner_uid=? ORDER BY l.magazine_id DESC;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5

[marketplace_magazine_insert_cargo]
SQL1_1 = INSERT INTO marketplace_magazine (item_id, owner_uid, count) VALUES ((SELECT item_id FROM marketplace_items WHERE item_class=?), ?, ?);
SQL1_INPUTS = 1, 2, 3

[marketplace_magazine_get_id]
SQL1_1 = SELECT item_id, owner_uid, count FROM marketplace_magazine WHERE magazine_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3

[marketplace_magazine_delete]
SQL1_1 = DELETE FROM marketplace_magazine WHERE magazine_id=?
SQL1_INPUTS = 1

[marketplace_magazine_get_class]
SQL1_1 = SELECT magazine_id, owner_uid, item_id, count FROM marketplace_magazine WHERE item_id=(SELECT item_id FROM marketplace_items WHERE item_class=?) AND owner_uid=?
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2-String, 3, 4

[marketplace_list_insert]
SQL1_1 = INSERT INTO marketplace_list (item_id, owner_uid, count, price) VALUES (?, ?, ?, ?);
SQL1_INPUTS = 1, 2, 3, 4

[marketplace_buy_insert]
SQL1_1 = INSERT INTO marketplace_magazine (item_id, owner_uid, count) VALUES (?,?,?)
SQL1_INPUTS = 1, 2, 3

[marketplace_list_delete]
SQL1_1 = DELETE FROM marketplace_list WHERE id=?
SQL1_INPUTS = 1

[marketplace_buy_update]
SQL1_1 = UPDATE marketplace_list SET count=count-? WHERE id=?;
SQL1_INPUTS = 1, 2

[marketplace_price_update]
SQL1_1 = UPDATE marketplace_list SET price=? WHERE id=?;
SQL1_INPUTS = 1, 2

[marketplace_magazine_update_plus]
SQL1_1 = UPDATE marketplace_magazine SET count=count+? WHERE item_id=? AND owner_uid=?;
SQL1_INPUTS = 1, 2, 3

[marketplace_magazine_update_minus]
SQL1_1 = UPDATE marketplace_magazine SET count=count-? WHERE item_id=? AND owner_uid=?;
SQL1_INPUTS = 1, 2, 3

[marketplace_insert_transaction]
SQL1_1 = INSERT INTO marketplace_transactions (owner_uid, target_uid, item_id, transaction_type, count, price) VALUES (?,?,?,?,?,?), (?,?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 2, 1, 3, 7, 5, 6

[marketplace_items_exists]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM marketplace_items WHERE item_class=?) THEN 'true' ELSE 'false' END;
SQL1_INPUTS = 1

[marketplace_magazine_exists]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM marketplace_magazine WHERE item_id=? AND owner_uid=?) THEN 'true' ELSE 'false' END;
SQL1_INPUTS = 1, 2

[marketplace_list_exists]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT * FROM marketplace_list WHERE id=?) THEN 'true' ELSE 'false' END;
SQL1_INPUTS = 1

[marketplace_list_select_id]
SQL1_1 = SELECT id, item_id, owner_uid, count, price FROM marketplace_list WHERE id=?
SQL1_INPUTS = 1
OUTPUT = 1, 2, 3-String, 4, 5

[marketplace_items_insert]
SQL1_1 = INSERT INTO marketplace_items (item_class, type_id) VALUES (?, (SELECT type_id FROM marketplace_types WHERE type_name=? AND type_class=?));
SQL1_INPUTS = 1, 2, 3


; --------------------------------------------------------------------------------
; Shop
; --------------------------------------------------------------------------------
[shopsystem_get_shop_id]
SQL1_1 = SELECT s.price_id, m.item_class, t.type_class, s.tax_id, s.price, s.count, s.max_count FROM shop_prices s LEFT JOIN marketplace_items m ON s.item_id=m.item_id LEFT JOIN marketplace_types t ON m.type_id=t.type_id WHERE s.shop_id=?;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4, 5, 6, 7

[shopsystem_update_rem_count]
SQL1_1 = UPDATE shop_prices SET count=count-? WHERE price_id=?
SQL1_INPUTS = 2, 1

[shopsystem_update_add_count]
SQL1_1 = UPDATE shop_prices SET count=count+? WHERE price_id=?
SQL1_INPUTS = 2, 1

[shopsystem_get_shops]
SQL1_1 = SELECT shop_id, company_id, shop_name, variable FROM shop_list;
OUTPUT = 1, 2, 3-String, 4-String

; --------------------------------------------------------------------------------
; Company Lockers
; --------------------------------------------------------------------------------

[existPlayerGearSave]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM company_gearsave WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END;
SQL1_INPUTS = 1

[insertPlayerGearSave]
SQL1_1 = INSERT INTO company_gearsave (uid, name, items, clothes, weapons) VALUES (?,?,?,?,?);
SQL1_INPUTS = 1,2,3,4,5

[updatePlayerGearSave]
SQL1_1 = UPDATE company_gearsave SET items=?, clothes=?, weapons=? WHERE uid=?;
SQL1_INPUTS = 1,2,3,4

[playerInfoGearSave]
SQL1_1 = SELECT items, clothes, weapons FROM company_gearsave WHERE uid=?;
SQL1_INPUTS = 1
OUTPUT = 1,2,3

; --------------------------------------------------------------------------------
; Phone Business Cards
; --------------------------------------------------------------------------------
[phone_business_cards_get_player]
SQL1_1 = SELECT c.card_id, c.player_uid, c.name, c.title, c.description, c.phone_number, b.path, c.font FROM phone_business_card c INNER JOIN phone_business_card_background b ON c.background_id=b.background_id WHERE c.player_uid=? AND c.company_id IS NULL;
SQL1_INPUTS = 1
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-String, 7-String, 8-String

[phone_business_cards_get_company]
SQL1_1 = SELECT c.card_id, c.company_id, c.name, c.title, c.description, c.phone_number, b.path, c.font FROM phone_business_card c INNER JOIN phone_business_card_background b ON c.background_id=b.background_id WHERE c.player_uid=? AND c.company_id=?;
SQL1_INPUTS = 1, 2
OUTPUT = 1, 2, 3-String, 4-String, 5-String, 6-String, 7-String, 8-String

[phone_business_cards_get_background]
SQL1_1 = SELECT background_id, name, path, subscriber, company_id FROM phone_business_card_background;
OUTPUT = 1, 2-String, 3-String, 4, 5

[phone_business_card_insert_company]
SQL1_1 = INSERT INTO phone_business_card (company_id, name, title, description, phone_number, background_id, font, player_uid) VALUES (?, ?, ?, ?, ?, ?, ?, ?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8

[phone_business_card_insert_player]
SQL1_1 = INSERT INTO phone_business_card (player_uid, name, title, description, phone_number, background_id, font) VALUES (?, ?, ?, ?, ?, ?, ?);
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7
